# -*- coding: utf-8 -*-
"""Predicting Credit Risk for Loan Applicants.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qQuBPJlvNOEP0L4fUTULFkRuzsr0nfHB
"""

#  Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category=UserWarning)


#  Load Data
try:
    df = pd.read_csv("/content/german_credit_data.csv", index_col=0)
    print("Dataset loaded successfully.")
except FileNotFoundError:
    print(
        "Error: 'german_credit_data.csv' not found."
        " Please download it from Kaggle"
        " (https://www.kaggle.com/datasets/uciml/german-credit)"
        " and place it in the correct directory."
    )
    exit()

print("Dataset Shape:", df.shape)
print("\nAvailable columns:", df.columns.tolist())
print("\nFirst 5 rows:\n", df.head())
print("\nDataset Info:")
df.info()
print("\nMissing values per column:\n", df.isnull().sum())

#  Exploratory Data Analysis (EDA)


# Basic Exploration
print(
    "\nDescriptive Statistics (Numerical Features):\n",
    df.describe(include=np.number),
)

# Feature Engineering (Example: Age Group)
# Create age groups before detailed EDA plots
bins = [18, 30, 40, 50, 60, 75]
labels = ["18-30", "31-40", "41-50", "51-60", "61-75"]
df["Age_Group"] = pd.cut(df["Age"], bins=bins, labels=labels, right=False)
print(
    "\nValue Counts for new 'Age_Group' feature:\n",
    df["Age_Group"].value_counts(),
)

#  Enhanced EDA Visualization


# Separate numerical and categorical features
eda_numerical_features = df.select_dtypes(include=np.number).columns.tolist()
if "Age" in eda_numerical_features:
    eda_numerical_features.remove("Age")  # Remove original Age if grouped

eda_categorical_features = df.select_dtypes(
    include=["object", "category"]
).columns.tolist()
if "Age_Group" not in eda_categorical_features and "Age_Group" in df.columns:
    eda_categorical_features.append('Age_Group') # Add engineered feature

# Plot histograms for numerical features
print("\nPlotting histograms for numerical features...")
plt.figure(figsize=(12, 10))
df[eda_numerical_features].hist(figsize=(12, 10), bins=20, layout=(-1, 3))
plt.suptitle("Histograms of Numerical Features")
plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust layout
plt.savefig('numerical_histograms.png')
plt.close()

# Plot bar charts for categorical features
print("\nPlotting bar charts for categorical features...")
num_cat_features = len(eda_categorical_features)
cols = 3  # Adjust number of columns for the plot grid
rows = (num_cat_features + cols - 1) // cols

fig, axes = plt.subplots(rows, cols, figsize=(15, rows * 4.5))
axes = axes.flatten()  # Flatten to easily iterate

for i, col in enumerate(eda_categorical_features):
    if col in df.columns: # Check if column exists
        order = df[col].value_counts().index
        sns.countplot(
            y=col, data=df, ax=axes[i], order=order, palette="viridis"
        )
        axes[i].set_title(f"Distribution of {col}")
        axes[i].set_xlabel("Count")
        axes[i].set_ylabel("")  # Remove y-label for cleaner look
    else:
        fig.delaxes(axes[i]) # Remove axis if column doesn't exist

# Hide any unused subplots
for j in range(i + 1, len(axes)):
    try:
        fig.delaxes(axes[j])
    except:
        pass

plt.suptitle("Bar Charts of Categorical Features", y=1.02)
plt.tight_layout()
plt.savefig('categorical_bars.png')
plt.close()

# Plot correlation heatmap for numerical features
print("\nPlotting correlation heatmap...")
plt.figure(figsize=(10, 8))
corr_features = eda_numerical_features
# Ensure only existing columns are used
corr_features = [f for f in corr_features if f in df.columns]
corr_matrix = df[corr_features].corr()
sns.heatmap(
    corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5
)
plt.title("Correlation Heatmap of Numerical Features")
plt.tight_layout()
plt.savefig('correlation_heatmap.png')
plt.close()

print("\nEDA completed successfully! Check the output image files for visualizations.")
print("\nNOTE: This dataset appears to be missing the target variable for credit risk.")
print("To perform classification, you'll need to download the complete dataset")
print("with a 'Risk' or 'Class' column indicating good/bad credit risk.")

